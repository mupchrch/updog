{"version":3,"sources":["reducers/dogs.js","reducers/index.js","components/Dog.js","components/Board.js","components/App.js","actions/index.js","serviceWorker.js","index.js"],"names":["dogs","state","arguments","length","undefined","action","type","doubleDogs","concat","Object","toConsumableArray","array","i","j","Math","floor","random","_ref","shuffleArray","map","dog","id","url","isSelected","isMatched","findIndex","item","newState","filter","every","arr","potentialMatches","forEach","combineReducers","Dog","onDogSelect","opacity","outline","react_default","a","createElement","className","src","height","style","onClick","onDragStart","e","preventDefault","Board","props","objectWithoutProperties","components_Dog","assign","key","connect","dispatch","initDogs","toggleDog","useEffect","fetch","then","response","json","message","components_Board","Boolean","window","location","hostname","match","store","compose","devToolsExtension","f","createStore","finalCreateStore","rootReducer","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0588e2d.chunk.js","sourcesContent":["// https://stackoverflow.com/a/12646864\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nconst dogs = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_DOGS':\n      const doubleDogs = [...action.dogs, ...action.dogs];\n      shuffleArray(doubleDogs);\n\n      return doubleDogs.map((dog, i) => {\n        return {\n          id: i,\n          url: dog,\n          isSelected: false,\n          isMatched: false\n        };\n      });\n    case 'TOGGLE_DOG':\n      const i = state.findIndex(item => item.id === action.id);\n      const newState = [...state];\n      newState[i].isSelected = !newState[i].isSelected;\n\n      // check match\n      if (newState[i].isSelected) {\n        // see if currently selected items match\n        const validMatch = newState.filter(item => item.isSelected).every((item, i, arr) => item.url === arr[0].url);\n        // if they do then check if they're all selected\n        if (validMatch) {\n          const potentialMatches = newState.filter(item => item.url === newState[i].url);\n          const completeMatch = potentialMatches.every(item => item.isSelected);\n\n          if (completeMatch) {\n            potentialMatches.forEach(item => {\n              item.isMatched = true;\n              item.isSelected = false;\n            });\n          }\n        } else {\n          // clear out all selections\n          return newState.map(item => {\n            item.isSelected = false;\n            return item;\n          });\n        }\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n\nexport default dogs;","import { combineReducers } from 'redux';\nimport dogs from './dogs';\n\nexport default combineReducers({\n  dogs\n});","import React from 'react';\nimport './Dog.css';\n\nfunction Dog({ id, url, isSelected, isMatched, onDogSelect }) {\n  const opacity = isSelected || isMatched ? 0.5 : 1;\n  const outline = isSelected ? '2px solid blue' : null;\n  const filter = isMatched ? 'blur(5px)' : null;\n\n  return (\n    <div className='dog'>\n      <img\n        src={url}\n        height='200px'\n        style={{ opacity, outline, filter }}\n        onClick={() => onDogSelect(id)}\n        onDragStart={e => e.preventDefault()}\n      />\n    </div>\n  );\n}\n\nexport default Dog;\n","import React from 'react';\nimport Dog from './Dog';\nimport './Board.css';\n\nfunction Board({ dogs, ...props }) {\n  return (\n    <div className=\"board\">\n      {\n        dogs.map((dog) =>\n          <Dog\n            key={dog.id}\n            id={dog.id}\n            url={dog.url}\n            isSelected={dog.isSelected}\n            isMatched={dog.isMatched}\n            {...props}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nexport default Board;","import React, { useEffect } from 'react';\nimport Board from './Board';\nimport { initDogs, toggleDog } from '../actions';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nfunction App({ initDogs, dogs, ...props }) {\n  useEffect(() => {\n    fetch('https://dog.ceo/api/breeds/image/random/8')\n      .then(response => response.json())\n      .then(json => initDogs(json.message));\n  }, [initDogs]);\n\n  return (\n    <div className=\"App\">\n      <Board dogs={dogs} {...props} />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  dogs: state.dogs\n});\nconst mapDispatchToProps = (dispatch) => ({\n  initDogs: dogs => dispatch(initDogs(dogs)),\n  onDogSelect: id => dispatch(toggleDog(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const initDogs = dogs => ({\n  type: 'INIT_DOGS',\n  dogs: dogs\n});\n\nexport const toggleDog = id => ({\n  type: 'TOGGLE_DOG',\n  id\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst finalCreateStore = compose(\n  window.devToolsExtension ? window.devToolsExtension() : f => f\n)(createStore)\n\nconst store = finalCreateStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}