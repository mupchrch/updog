{"version":3,"sources":["reducers/dogs.js","reducers/index.js","components/Dog.js","components/Board.js","components/App.js","actions/index.js","serviceWorker.js","index.js"],"names":["dogs","state","arguments","length","undefined","action","type","duplicateDogs","i","dogsPerMatch","concat","Object","toConsumableArray","array","j","Math","floor","random","_ref","shuffleArray","map","dog","id","url","isSelected","isMatched","findIndex","item","newDogs","filter","every","arr","potentialMatches","forEach","combineReducers","Dog","onDogSelect","style","opacity","outline","cursor","backgroundImage","react_default","a","createElement","disabled","className","onClick","onDragStart","e","preventDefault","Board","props","objectWithoutProperties","components_Dog","assign","key","connect","isGameWon","dispatch","initDogs","toggleDog","onReplay","numMatches","useEffect","fetch","then","response","json","message","components_Board","hidden","Boolean","window","location","hostname","match","store","compose","devToolsExtension","f","createStore","finalCreateStore","rootReducer","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAQA,IAwDeA,EAxDF,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,MACb,IAAK,YAEH,IADA,IAAIC,EAAgB,GACXC,EAAE,EAAGA,EAAEH,EAAOI,aAAcD,IACnCD,EAAa,GAAAG,OAAAC,OAAAC,EAAA,EAAAD,CAAOJ,GAAPI,OAAAC,EAAA,EAAAD,CAAyBN,EAAOL,OAc/C,OA1BN,SAAsBa,GACpB,IAAK,IAAIL,EAAIK,EAAMV,OAAS,EAAGK,EAAI,EAAGA,IAAK,CACzC,IAAMM,EAAIC,KAAKC,MAAMD,KAAKE,UAAYT,EAAI,IADDU,EAElB,CAACL,EAAMC,GAAID,EAAML,IAAvCK,EAAML,GAFkCU,EAAA,GAE9BL,EAAMC,GAFwBI,EAAA,IAcvCC,CAAaZ,GAEAA,EAAca,IAAI,SAACC,EAAKb,GACnC,MAAO,CACLc,GAAId,EACJe,IAAKF,EACLG,YAAY,EACZC,WAAW,KAKjB,IAAK,aACH,IAAMjB,EAAIP,EAAMyB,UAAU,SAAAC,GAAI,OAAIA,EAAKL,KAAOjB,EAAOiB,KAC/CM,EAAOjB,OAAAC,EAAA,EAAAD,CAAOV,GAIpB,GAHA2B,EAAQpB,GAAGgB,YAAcI,EAAQpB,GAAGgB,WAGhCI,EAAQpB,GAAGgB,WAIb,GAFqBI,EAAQC,OAAO,SAAAF,GAAI,OAAIA,EAAKH,aAAYM,MAAM,SAACH,EAAMnB,EAAGuB,GAAV,OAAkBJ,EAAKJ,MAAQQ,EAAI,GAAGR,MAEvF,CAEhB,IAAMS,EAAmBJ,EAAQC,OAAO,SAAAF,GAAI,OAAIA,EAAKJ,MAAQK,EAAQpB,GAAGe,MAChDS,EAAiBF,MAAM,SAAAH,GAAI,OAAIA,EAAKH,cAI1DQ,EAAiBC,QAAQ,SAAAN,GACvBA,EAAKF,WAAY,EACjBE,EAAKH,YAAa,SAKtBI,EAAQK,QAAQ,SAAAN,GAAI,OAAIA,EAAKH,YAAa,IAI9C,OAAOI,EACT,IAAK,aACH,MAAO,GACT,QACE,OAAO3B,ICzDEiC,cAAgB,CAC7BlC,8BCmBamC,MApBf,SAAAjB,GAA8D,IAA/CI,EAA+CJ,EAA/CI,GAAIC,EAA2CL,EAA3CK,IAAKC,EAAsCN,EAAtCM,WAAYC,EAA0BP,EAA1BO,UAAWW,EAAelB,EAAfkB,YACvCC,EAAQ,CACZC,QAASd,GAAcC,EAAY,GAAM,EACzCc,QAASf,EAAa,kBAAoB,KAC1CK,OAAQJ,EAAY,YAAc,KAClCe,OAAQf,EAAY,KAAO,UAC3BgB,gBAAe,OAAA/B,OAASa,EAAT,MAGjB,OACEmB,EAAAC,EAAAC,cAAA,UACEC,SAAUpB,EACVqB,UAAU,MACVT,MAAOA,EACPU,QAAS,kBAAMX,EAAYd,IAC3B0B,YAAa,SAAAC,GAAC,OAAIA,EAAEC,2BCKXC,MAnBf,SAAAjC,GAAmC,IAAlBlB,EAAkBkB,EAAlBlB,KAASoD,EAASzC,OAAA0C,EAAA,EAAA1C,CAAAO,EAAA,UACjC,OACEwB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAEX9C,EAAKoB,IAAI,SAACC,GAAD,OACPqB,EAAAC,EAAAC,cAACU,EAAD3C,OAAA4C,OAAA,CACEC,IAAKnC,EAAIC,GACTA,GAAID,EAAIC,GACRC,IAAKF,EAAIE,IACTC,WAAYH,EAAIG,WAChBC,UAAWJ,EAAII,WACX2B,cCgBhB,IAUeK,cAVS,SAAAxD,GAAK,MAAK,CAChCyD,aAAWzD,EAAMD,MAAQC,EAAMD,KAAKG,OAAS,IAAIF,EAAMD,KAAK8B,MAAM,SAAAT,GAAG,OAAIA,EAAII,YAC7EzB,KAAMC,EAAMD,OAEa,SAAC2D,GAAD,MAAe,CACxCC,SAAU,SAAC5D,EAAMS,GAAP,OAAwBkD,ECpCZ,SAAC3D,EAAMS,GAAP,MAAyB,CAC/CH,KAAM,YACNN,OACAS,gBDiC2CmD,CAAS5D,EAAMS,KAC1D2B,YAAa,SAAAd,GAAE,OAAIqC,EC/BI,SAAArC,GAAE,MAAK,CAC9BhB,KAAM,aACNgB,MD6B4BuC,CAAUvC,KACtCwC,SAAU,kBAAMH,EC3Bc,CAC9BrD,KAAM,kBD6BOmD,CAnCf,SAAAvC,GAAgE,IAAjD0C,EAAiD1C,EAAjD0C,SAAUE,EAAuC5C,EAAvC4C,SAAU9D,EAA6BkB,EAA7BlB,KAAM0D,EAAuBxC,EAAvBwC,UAAcN,EAASzC,OAAA0C,EAAA,EAAA1C,CAAAO,EAAA,4CAGxD6C,EAAa/D,EAAK6B,OAAO,SAAAR,GAAG,OAAIA,EAAII,YAAWtB,OADhC,EAWrB,OARA6D,oBAAU,WACY,IAAhBhE,EAAKG,QACP8D,MAAM,6CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIR,EAASQ,EAAKC,QAPb,OAYnB3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,YAAmCiB,EAAnC,MAAkD/D,EAAKG,OAbtC,GAcjBuC,EAAAC,EAAAC,cAAC0B,EAAD3D,OAAA4C,OAAA,CAAOvD,KAAMA,GAAUoD,IACvBV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASyB,QAASb,GAC/BhB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMe,MAAvB,mBEbYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAIMC,EAJmBC,YACvBL,OAAOM,kBAAoBN,OAAOM,oBAAsB,SAAAC,GAAC,OAAIA,GADtCF,CAEvBG,IAEYC,CAAiBC,GAE/BC,IAASC,OACP3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUT,MAAOA,GACfnC,EAAAC,EAAAC,cAAC2C,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.ef240c43.chunk.js","sourcesContent":["// https://stackoverflow.com/a/12646864\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nconst dogs = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_DOGS':\n      let duplicateDogs = [];\n      for (let i=0; i<action.dogsPerMatch; i++) {\n        duplicateDogs = [...duplicateDogs, ...action.dogs];\n      }\n\n      shuffleArray(duplicateDogs);\n\n      const dogs = duplicateDogs.map((dog, i) => {\n        return {\n          id: i,\n          url: dog,\n          isSelected: false,\n          isMatched: false\n        };\n      });\n\n      return dogs;\n    case 'TOGGLE_DOG':\n      const i = state.findIndex(item => item.id === action.id);\n      const newDogs = [...state];\n      newDogs[i].isSelected = !newDogs[i].isSelected;\n\n      // check match\n      if (newDogs[i].isSelected) {\n        // see if currently selected items match\n        const isValidMatch = newDogs.filter(item => item.isSelected).every((item, i, arr) => item.url === arr[0].url);\n\n        if (isValidMatch) {\n          // check if they're all selected\n          const potentialMatches = newDogs.filter(item => item.url === newDogs[i].url);\n          const isCompleteMatch = potentialMatches.every(item => item.isSelected);\n\n          if (isCompleteMatch) {\n            // clear selections and flag as matched\n            potentialMatches.forEach(item => {\n              item.isMatched = true;\n              item.isSelected = false;\n            });\n          }\n        } else {\n          // clear out all selections\n          newDogs.forEach(item => item.isSelected = false);\n        }\n      }\n\n      return newDogs;\n    case 'CLEAR_DOGS':\n      return [];\n    default:\n      return state;\n  }\n}\n\nexport default dogs;","import { combineReducers } from 'redux';\nimport dogs from './dogs';\n\nexport default combineReducers({\n  dogs\n});","import React from 'react';\nimport './Dog.css';\n\nfunction Dog({ id, url, isSelected, isMatched, onDogSelect }) {\n  const style = {\n    opacity: isSelected || isMatched ? 0.5 : 1,\n    outline: isSelected ? '5px solid black' : null,\n    filter: isMatched ? 'blur(5px)' : null,\n    cursor: isMatched ? null : 'pointer',\n    backgroundImage: `url(${url})`\n  };\n\n  return (\n    <button\n      disabled={isMatched}\n      className='dog'\n      style={style}\n      onClick={() => onDogSelect(id)}\n      onDragStart={e => e.preventDefault()}\n    />\n  );\n}\n\nexport default Dog;\n","import React from 'react';\nimport Dog from './Dog';\nimport './Board.css';\n\nfunction Board({ dogs, ...props }) {\n  return (\n    <div className='board'>\n      {\n        dogs.map((dog) =>\n          <Dog\n            key={dog.id}\n            id={dog.id}\n            url={dog.url}\n            isSelected={dog.isSelected}\n            isMatched={dog.isMatched}\n            {...props}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nexport default Board;","import React, { useEffect } from 'react';\nimport Board from './Board';\nimport { initDogs, toggleDog, clearDogs } from '../actions';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nfunction App({ initDogs, onReplay, dogs, isGameWon, ...props }) {\n  const numDogs = 8;\n  const dogsPerMatch = 2;\n  const numMatches = dogs.filter(dog => dog.isMatched).length / dogsPerMatch;\n\n  useEffect(() => {\n    if (dogs.length === 0) {\n      fetch('https://dog.ceo/api/breeds/image/random/' + numDogs)\n        .then(response => response.json())\n        .then(json => initDogs(json.message, dogsPerMatch));\n    }\n  });\n\n  return (\n    <div className='App'>\n      <div className='matches'>Matches: {numMatches} / {dogs.length/dogsPerMatch}</div>\n      <Board dogs={dogs} {...props} />\n      <div className='winner' hidden={!isGameWon}>\n        <div>YOU WIN</div>\n        <button onClick={() => onReplay()}>play again?</button>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  isGameWon: state.dogs && state.dogs.length > 0 ? state.dogs.every(dog => dog.isMatched) : false,\n  dogs: state.dogs\n});\nconst mapDispatchToProps = (dispatch) => ({\n  initDogs: (dogs, dogsPerMatch) => dispatch(initDogs(dogs, dogsPerMatch)),\n  onDogSelect: id => dispatch(toggleDog(id)),\n  onReplay: () => dispatch(clearDogs())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const initDogs = (dogs, dogsPerMatch) => ({\n  type: 'INIT_DOGS',\n  dogs,\n  dogsPerMatch\n});\n\nexport const toggleDog = id => ({\n  type: 'TOGGLE_DOG',\n  id\n});\n\nexport const clearDogs = () => ({\n  type: 'CLEAR_DOGS'\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst finalCreateStore = compose(\n  window.devToolsExtension ? window.devToolsExtension() : f => f\n)(createStore)\n\nconst store = finalCreateStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}